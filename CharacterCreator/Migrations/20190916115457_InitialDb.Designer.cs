// <auto-generated />
using System;
using CharacterCreator.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CharacterCreator.Migrations
{
    [DbContext(typeof(CreatorContext))]
    [Migration("20190916115457_InitialDb")]
    partial class InitialDb
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.11-servicing-32099")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CharacterCreator.Data.Entities.Abilities", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AbilityDesc");

                    b.Property<string>("AbilityTitle");

                    b.Property<string>("Class");

                    b.Property<int?>("ClassId");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.ToTable("Abilities");
                });

            modelBuilder.Entity("CharacterCreator.Data.Entities.AbilityIncrease", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Ability");

                    b.Property<string>("Class");

                    b.Property<int>("Increase");

                    b.Property<int?>("RaceId");

                    b.HasKey("Id");

                    b.HasIndex("RaceId");

                    b.ToTable("AbilityIncreases");
                });

            modelBuilder.Entity("CharacterCreator.Data.Entities.AbilityScores", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CharacterId");

                    b.Property<string>("Charisma");

                    b.Property<string>("Constitution");

                    b.Property<string>("Dexterity");

                    b.Property<string>("Intelligence");

                    b.Property<string>("Strength");

                    b.Property<string>("Wisdom");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId");

                    b.ToTable("AbilityScores");
                });

            modelBuilder.Entity("CharacterCreator.Data.Entities.AllowedSkills", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AllowedSkill");

                    b.Property<int?>("BackgroundId");

                    b.Property<int?>("BackgroundId1");

                    b.Property<int?>("ProficienciesId");

                    b.HasKey("Id");

                    b.HasIndex("BackgroundId");

                    b.HasIndex("BackgroundId1");

                    b.HasIndex("ProficienciesId");

                    b.ToTable("AllowedSkills");
                });

            modelBuilder.Entity("CharacterCreator.Data.Entities.ArmorProf", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ArmorProfName");

                    b.Property<int?>("ProficienciesId");

                    b.HasKey("Id");

                    b.HasIndex("ProficienciesId");

                    b.ToTable("ArmorProfs");
                });

            modelBuilder.Entity("CharacterCreator.Data.Entities.Background", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BackgroundAbility");

                    b.Property<string>("BackgroundTitle");

                    b.HasKey("Id");

                    b.ToTable("Backgrounds");
                });

            modelBuilder.Entity("CharacterCreator.Data.Entities.BackgroundSkill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("SkillName");

                    b.HasKey("Id");

                    b.ToTable("BackgroundSkills");
                });

            modelBuilder.Entity("CharacterCreator.Data.Entities.BackgroundVarSkill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("SkillName");

                    b.HasKey("Id");

                    b.ToTable("BackgroundVarSkills");
                });

            modelBuilder.Entity("CharacterCreator.Data.Entities.Character", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Alignment");

                    b.Property<int?>("BackgroundId");

                    b.Property<int?>("ClassId");

                    b.Property<string>("Name");

                    b.Property<int?>("RaceId");

                    b.HasKey("Id");

                    b.HasIndex("BackgroundId");

                    b.HasIndex("ClassId");

                    b.HasIndex("RaceId");

                    b.ToTable("Characters");
                });

            modelBuilder.Entity("CharacterCreator.Data.Entities.Class", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("HitDice");

                    b.Property<string>("Name");

                    b.Property<int?>("ProficienciesId");

                    b.HasKey("Id");

                    b.HasIndex("ProficienciesId");

                    b.ToTable("Classes");
                });

            modelBuilder.Entity("CharacterCreator.Data.Entities.EquipmentChoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Choice1");

                    b.Property<string>("Choice2");

                    b.Property<string>("Class");

                    b.Property<int?>("ClassId");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.ToTable("EquipmentChoices");
                });

            modelBuilder.Entity("CharacterCreator.Data.Entities.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BackgroundId");

                    b.Property<string>("ItemName");

                    b.HasKey("Id");

                    b.HasIndex("BackgroundId");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("CharacterCreator.Data.Entities.Language", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BackgroundId");

                    b.Property<string>("LanguageName");

                    b.Property<int?>("RaceId");

                    b.HasKey("Id");

                    b.HasIndex("BackgroundId");

                    b.HasIndex("RaceId");

                    b.ToTable("Languages");
                });

            modelBuilder.Entity("CharacterCreator.Data.Entities.Material", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("MaterialName");

                    b.Property<int?>("SpellId");

                    b.HasKey("Id");

                    b.HasIndex("SpellId");

                    b.ToTable("Materials");
                });

            modelBuilder.Entity("CharacterCreator.Data.Entities.Proficiencies", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Class");

                    b.Property<int>("SkillsProfAmount");

                    b.HasKey("Id");

                    b.ToTable("Proficiencies");
                });

            modelBuilder.Entity("CharacterCreator.Data.Entities.Race", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Age");

                    b.Property<string>("Alignment");

                    b.Property<string>("Name");

                    b.Property<string>("Size");

                    b.Property<string>("Speed");

                    b.HasKey("Id");

                    b.ToTable("Races");
                });

            modelBuilder.Entity("CharacterCreator.Data.Entities.RaceTrait", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Race");

                    b.Property<int?>("RaceId");

                    b.Property<string>("TraitDesc");

                    b.Property<string>("TraitName");

                    b.HasKey("Id");

                    b.HasIndex("RaceId");

                    b.ToTable("RaceTraits");
                });

            modelBuilder.Entity("CharacterCreator.Data.Entities.SavingThrows", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ProficienciesId");

                    b.Property<string>("SavingThrow");

                    b.HasKey("Id");

                    b.HasIndex("ProficienciesId");

                    b.ToTable("SavingThrows");
                });

            modelBuilder.Entity("CharacterCreator.Data.Entities.Spell", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CastingTime");

                    b.Property<int?>("CharacterId");

                    b.Property<string>("Components");

                    b.Property<string>("Desc");

                    b.Property<string>("Duration");

                    b.Property<string>("Level");

                    b.Property<string>("Name");

                    b.Property<string>("Range");

                    b.Property<string>("School");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId");

                    b.ToTable("Spells");
                });

            modelBuilder.Entity("CharacterCreator.Data.Entities.ToolProf", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BackgroundId");

                    b.Property<int?>("ProficienciesId");

                    b.Property<string>("ToolProfName");

                    b.Property<string>("Type");

                    b.HasKey("Id");

                    b.HasIndex("BackgroundId");

                    b.HasIndex("ProficienciesId");

                    b.ToTable("ToolProfs");
                });

            modelBuilder.Entity("CharacterCreator.Data.Entities.WeaponProf", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ProficienciesId");

                    b.Property<string>("WeaponProfName");

                    b.HasKey("Id");

                    b.HasIndex("ProficienciesId");

                    b.ToTable("WeaponProfs");
                });

            modelBuilder.Entity("CharacterCreator.Data.Entities.Abilities", b =>
                {
                    b.HasOne("CharacterCreator.Data.Entities.Class")
                        .WithMany("Abilities")
                        .HasForeignKey("ClassId");
                });

            modelBuilder.Entity("CharacterCreator.Data.Entities.AbilityIncrease", b =>
                {
                    b.HasOne("CharacterCreator.Data.Entities.Race")
                        .WithMany("AbilityScoreIncrease")
                        .HasForeignKey("RaceId");
                });

            modelBuilder.Entity("CharacterCreator.Data.Entities.AbilityScores", b =>
                {
                    b.HasOne("CharacterCreator.Data.Entities.Character")
                        .WithMany("AbilityScores")
                        .HasForeignKey("CharacterId");
                });

            modelBuilder.Entity("CharacterCreator.Data.Entities.AllowedSkills", b =>
                {
                    b.HasOne("CharacterCreator.Data.Entities.Background")
                        .WithMany("BackgroundSkill")
                        .HasForeignKey("BackgroundId");

                    b.HasOne("CharacterCreator.Data.Entities.Background")
                        .WithMany("BackgroundVarSkill")
                        .HasForeignKey("BackgroundId1");

                    b.HasOne("CharacterCreator.Data.Entities.Proficiencies")
                        .WithMany("AllowedSkills")
                        .HasForeignKey("ProficienciesId");
                });

            modelBuilder.Entity("CharacterCreator.Data.Entities.ArmorProf", b =>
                {
                    b.HasOne("CharacterCreator.Data.Entities.Proficiencies")
                        .WithMany("ArmorProf")
                        .HasForeignKey("ProficienciesId");
                });

            modelBuilder.Entity("CharacterCreator.Data.Entities.Character", b =>
                {
                    b.HasOne("CharacterCreator.Data.Entities.Background", "Background")
                        .WithMany()
                        .HasForeignKey("BackgroundId");

                    b.HasOne("CharacterCreator.Data.Entities.Class", "Class")
                        .WithMany()
                        .HasForeignKey("ClassId");

                    b.HasOne("CharacterCreator.Data.Entities.Race", "Race")
                        .WithMany()
                        .HasForeignKey("RaceId");
                });

            modelBuilder.Entity("CharacterCreator.Data.Entities.Class", b =>
                {
                    b.HasOne("CharacterCreator.Data.Entities.Proficiencies", "Proficiencies")
                        .WithMany()
                        .HasForeignKey("ProficienciesId");
                });

            modelBuilder.Entity("CharacterCreator.Data.Entities.EquipmentChoice", b =>
                {
                    b.HasOne("CharacterCreator.Data.Entities.Class")
                        .WithMany("EquipmentChoices")
                        .HasForeignKey("ClassId");
                });

            modelBuilder.Entity("CharacterCreator.Data.Entities.Item", b =>
                {
                    b.HasOne("CharacterCreator.Data.Entities.Background")
                        .WithMany("BackgroundItem")
                        .HasForeignKey("BackgroundId");
                });

            modelBuilder.Entity("CharacterCreator.Data.Entities.Language", b =>
                {
                    b.HasOne("CharacterCreator.Data.Entities.Background")
                        .WithMany("BackgroundLanguage")
                        .HasForeignKey("BackgroundId");

                    b.HasOne("CharacterCreator.Data.Entities.Race")
                        .WithMany("Languages")
                        .HasForeignKey("RaceId");
                });

            modelBuilder.Entity("CharacterCreator.Data.Entities.Material", b =>
                {
                    b.HasOne("CharacterCreator.Data.Entities.Spell")
                        .WithMany("Materials")
                        .HasForeignKey("SpellId");
                });

            modelBuilder.Entity("CharacterCreator.Data.Entities.RaceTrait", b =>
                {
                    b.HasOne("CharacterCreator.Data.Entities.Race")
                        .WithMany("RaceTrait")
                        .HasForeignKey("RaceId");
                });

            modelBuilder.Entity("CharacterCreator.Data.Entities.SavingThrows", b =>
                {
                    b.HasOne("CharacterCreator.Data.Entities.Proficiencies")
                        .WithMany("SavingThrows")
                        .HasForeignKey("ProficienciesId");
                });

            modelBuilder.Entity("CharacterCreator.Data.Entities.Spell", b =>
                {
                    b.HasOne("CharacterCreator.Data.Entities.Character")
                        .WithMany("Spells")
                        .HasForeignKey("CharacterId");
                });

            modelBuilder.Entity("CharacterCreator.Data.Entities.ToolProf", b =>
                {
                    b.HasOne("CharacterCreator.Data.Entities.Background")
                        .WithMany("BackgroundToolProf")
                        .HasForeignKey("BackgroundId");

                    b.HasOne("CharacterCreator.Data.Entities.Proficiencies")
                        .WithMany("ToolProf")
                        .HasForeignKey("ProficienciesId");
                });

            modelBuilder.Entity("CharacterCreator.Data.Entities.WeaponProf", b =>
                {
                    b.HasOne("CharacterCreator.Data.Entities.Proficiencies")
                        .WithMany("WeaponProf")
                        .HasForeignKey("ProficienciesId");
                });
#pragma warning restore 612, 618
        }
    }
}
